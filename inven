from flask import Flask, request, jsonify, abort

app = Flask(__name__)

# In-memory data storage for inventory items
inventory_items = []

# Function to validate item data
def validate_item(data):
    if 'name' not in data or not isinstance(data['name'], str):
        abort(400, 'Invalid item name. It must be a non-empty string.')
    if 'quantity' not in data or not isinstance(data['quantity'], int) or data['quantity'] < 0:
        abort(400, 'Invalid quantity. It must be a non-negative integer.')
    if 'price' not in data or not isinstance(data['price'], (int, float)) or data['price'] < 0:
        abort(400, 'Invalid price. It must be a non-negative number.')

# Endpoint to add a new inventory item (POST)
@app.route('/inventory', methods=['POST'])
def add_item():
    data = request.get_json()
    validate_item(data)
    
    new_item = {
        'id': len(inventory_items) + 1,
        'name': data['name'],
        'quantity': data['quantity'],
        'price': data['price']
    }
    inventory_items.append(new_item)
    return jsonify(new_item), 201

# Endpoint to get all inventory items (GET)
@app.route('/inventory', methods=['GET'])
def get_items():
    return jsonify(inventory_items), 200

# Endpoint to get a specific item by ID (GET)
@app.route('/inventory/<int:item_id>', methods=['GET'])
def get_item(item_id):
    item = next((item for item in inventory_items if item['id'] == item_id), None)
    if item is None:
        abort(404, 'Item not found.')
    return jsonify(item), 200

# Endpoint to update an inventory item (PUT)
@app.route('/inventory/<int:item_id>', methods=['PUT'])
def update_item(item_id):
    data = request.get_json()
    validate_item(data)
    
    item = next((item for item in inventory_items if item['id'] == item_id), None)
    if item is None:
        abort(404, 'Item not found.')

    item['name'] = data['name']
    item['quantity'] = data['quantity']
    item['price'] = data['price']
    return jsonify(item), 200

# Endpoint to delete an inventory item (DELETE)
@app.route('/inventory/<int:item_id>', methods=['DELETE'])
def delete_item(item_id):
    global inventory_items
    inventory_items = [item for item in inventory_items if item['id'] != item_id]
    return jsonify({'message': 'Item deleted successfully.'}), 200

if __name__ == '__main__':
    app.run(debug=True)
